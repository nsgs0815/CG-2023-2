<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <title>SOMBRAS</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            font-size: 0;
        }

        canvas {
            width: 100%;
            height: 100%;
        }
    </style>

</head>

<body>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cs.wellesley.edu/~cs307/threejs/libs/OrbitControls-r95.js"></script>
    <script>

        //ESCENA Y RENDER
        const scene = new THREE.Scene(); //genera una nueva escena 
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000); //cámara del tipo perspectiva
        const renderer = new THREE.WebGLRenderer({ antialias: true }); //render
        //scene.background = new THREE.Color(0xE1E1E1); //asgina un color al background (fondo)
        camera.position.z = 10; //posicion de la camara en Z
        camera.position.y = -3;

        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.shadowMap.enabled = true; //habilita las sombras en el render
        document.body.appendChild(renderer.domElement);

        //ORBIT CONTROLS
        const controls = new THREE.OrbitControls(camera, renderer.domElement);
        controls.enableZoom = true;
        controls.enableRotate = true;
        controls.minDistance = 10;
        controls.maxDistance = 500;

        //VISUALIZADOR DE LOS EJES X,Y,Z
        var axesHelper = new THREE.AxesHelper(5); //metodo para ver los ejes x,y,z
        scene.add(axesHelper);

        //ICOSAEDRO
        const geometry = new THREE.IcosahedronGeometry(3,1);
        const material = new THREE.MeshBasicMaterial({ color: 0x00F7FF });
        const icosaedro = new THREE.Mesh(geometry, material);
        scene.add(icosaedro);

        //SOMBRAS DE LA ESCENA 
        const sombraLocal = new THREE.ShaderMaterial({
            vertexShader: `
        varying vec3 vNormal;
        void main() {
            vNormal = normal;
            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
        }
    `,
            fragmentShader: `
        varying vec3 vNormal;
        void main() {
            vec3 light = vec3(1.0, 1.0, 1.0); // Dirección de la fuente de luz
            light = normalize(light);
            float dProd = dot(vNormal, light);
            gl_FragColor = vec4(dProd, dProd, dProd, 1.0);
        }
    `
        });
        const sombraPlana = new THREE.MeshLambertMaterial({color: 0x9100FF}); //morado
        const sombraGouraud = new THREE.MeshLambertMaterial({ color: 0x00FFFF }); //cian
        const sombraPhong = new THREE.MeshPhongMaterial({ color: 0x00FF44 }); //verde
        icosaedro.material = sombraLocal;


        //IGRESAR POR TECLADO EL TIPO DE SOMBRA A UTILIZAR
        document.addEventListener('keydown', (event) => {//acciones de cambio de sombra
            if (event.key === 'l' || event.key === 'L') { icosaedro.material = sombraLocal; }
            else if (event.key === 'p' || event.key === 'P') { icosaedro.material = sombraPlana; }
            else if (event.key === 'G' || event.key === 'g') { icosaedro.material = sombraGouraud; }
            else if (event.key === 'f' || event.key === 'F') { icosaedro.material = sombraPhong; }
        })

        //LUCES
        function makeLights() { //LUCES DE LA ESCENA

            light0 = new THREE.AmbientLight(0x202020); // 10%
            scene.add(light0);

            light1 = new THREE.PointLight(0xFFFFFF, 1, 100); // 50%
            light1.position.set(0, 0, 25);
            scene.add(light1);

            light2 = new THREE.DirectionalLight(0xEBF3EB, 0.8);
            light2.position.set(0, 0, 0);
            scene.add(light2);
        }

        renderer.render(scene, camera); //carga (renderiza) la escena y la camara
        function animate() {
            requestAnimationFrame(animate);
            icosaedro.rotation.y += 0.01;
            controls.update();
            renderer.render(scene, camera);
        };
        animate();
        makeLights();
        alert('Oprime: \nL(shader local) \nP(shader Plano) \nG(shader Gouraud) \nF(shader Phong)');

    </script>


</body>

</html>