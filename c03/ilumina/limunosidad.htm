<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <title>LUMINOSIDAD</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            font-size: 0;
        }

        canvas {
            width: 100%;
            height: 100%;
        }
    </style>
</head>

<body>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script>

        const scene = new THREE.Scene(); //genera una nueva escena 
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000); //cámara del tipo perspectiva
        const renderer = new THREE.WebGLRenderer({ antialias: true }); //render

        renderer.setSize(window.innerWidth, window.innerHeight);
        scene.background = new THREE.Color(0xCCFFFF); //asgina un color al background (fondo)
        renderer.shadowMap.enabled = true; //habilita las sombras en el render
        document.body.appendChild(renderer.domElement);
        
        var axesHelper = new THREE.AxesHelper(5); //metodo para ver los ejes x,y,z
        scene.add(axesHelper);
        camera.position.z = 10; //posicion de la camara en Z
        camera.position.y = -3;



        //CAPARAZON
        const capaGeometry = new THREE.CylinderGeometry(2, 4, 1, 32); //constructor de geometria cilíndirca
        const materialCaparazon = new THREE.MeshNormalMaterial({ color: 0x893404 }); //material con reflexion difusa (lambert)
        const caparazon = new THREE.Mesh(capaGeometry, materialCaparazon); //objeto caparazon

        //PATAS
        function patas() {
            const pataGeometry = new THREE.CylinderGeometry(0.5, 0.5, 1, 32);
            const materialPata = new THREE.MeshNormalMaterial({ color: 0x098D23 }); //material con reflexion difusa (lambert)
            const pata = new THREE.Mesh(pataGeometry, materialPata); 
            return pata;
        }

        const pata1 = new patas(); pata1.position.set(-2.25,-1,2);
        const pata2 = new patas(); pata2.position.set(-2.25,-1,-2);
        const pata3 = new patas(); pata3.position.set(2.25,-1,-2);
        const pata4 = new patas(); pata4.position.set(2.25,-1,2);




        const tortuga = new THREE.Group();
        tortuga.add(caparazon,pata1,pata2,pata3,pata4); //añadir elementosal grupo tortuga
        scene.add(tortuga); //añadr grupo tortuga
        function makeLights() {
            light0 = new THREE.AmbientLight(0x202020); // 10%
            scene.add(light0);

            light1 = new THREE.PointLight(TW.WHITE, 0.5); // 50%
            light1.position.set(-12, 15, 10);
            scene.add(light1);

            light2 = new THREE.DirectionalLight(TW.WHITE, 0.3);
            light2.position.set(0, 100, 10);
            scene.add(light2);
        }

        renderer.render(scene, camera); //carga (renderiza) la escena y la camara
        function animate() {
            requestAnimationFrame(animate);

            //controls.update();
            tortuga.rotation.x += 0.01;
            tortuga.rotation.y += 0.01;
            renderer.render(scene, camera);
        };
        //animate();
        makeLights();

    </script>


</body>

</html>