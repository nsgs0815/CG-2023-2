<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <title>LUMINOSIDAD</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            font-size: 0;
        }

        canvas {
            width: 100%;
            height: 100%;
        }
    </style>
</head>

<body>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cs.wellesley.edu/~cs307/threejs/libs/OrbitControls-r95.js"></script>
    <script>

        const scene = new THREE.Scene(); //genera una nueva escena 
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000); //cámara del tipo perspectiva
        const renderer = new THREE.WebGLRenderer({ antialias: true }); //render

        scene.background = new THREE.Color(0xB3DED7); //asgina un color al background (fondo)
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.shadowMap.enabled = true; //habilita las sombras en el render
        document.body.appendChild(renderer.domElement);

        //ORBIT CONTROLS
        const controls = new THREE.OrbitControls(camera, renderer.domElement);
        controls.enableZoom = true;
        controls.enableRotate = true;
        controls.minDistance = 10;
        controls.maxDistance = 500;

        var axesHelper = new THREE.AxesHelper(5); //metodo para ver los ejes x,y,z
        scene.add(axesHelper);
        camera.position.z = 10; //posicion de la camara en Z
        camera.position.y = -3;

        //CAPARAZON
        const capaGeometry = new THREE.CylinderGeometry(2, 4, 1, 8); //constructor de geometria cilíndirca
        const materialCaparazon = new THREE.MeshLambertMaterial({ color: 0x893404 }); //material con reflexion difusa (lambert)
        const caparazon = new THREE.Mesh(capaGeometry, materialCaparazon); //objeto caparazon

        //PATAS
        function patas() {
            const puntoCurva = new THREE.CatmullRomCurve3([//puntos que definen la curva que dibuja el tubo, vectores (x,y,z)
                new THREE.Vector3(0, 0, 0),   // Punto de inicio
                new THREE.Vector3(0, -1, 0),   // Punto en la parte superior de la pata izquierda
                new THREE.Vector3(1, -1, 0),   // Punto en la parte inferior de la pata derecha
            ]);

            const points = puntoCurva.getPoints(50); //optiene los puntos del arreglo de vectores "puntoCurva"
            const curva = new THREE.CatmullRomCurve3(points) //curva generada con el contructor dados los puntos optenidos anteriormente
            const pataGeometry = new THREE.TubeGeometry(curva, 8, 0.5, 8, false); //constructor para geometria de tubo(linea o curva, segmentos tubulares,radio,segmentos radiales,cerrado o abierto)
            const materialPatas = new THREE.MeshLambertMaterial({ color: 0x045801 ,side: THREE.DoubleSide }); //material para usaer luces y sombras, carga material tambien al interior del tubo
            const pata = new THREE.Mesh(pataGeometry, materialPatas); //objeto malla que genera el tubo
            return pata;
        }
        const pata1 = new patas(); pata1.position.set(-2.25, -0.5, 2);
        const pata2 = new patas(); pata2.position.set(-2.25, -0.5, -2);
        const pata3 = new patas(); pata3.position.set(2.25, -0.5, -2);
        const pata4 = new patas(); pata4.position.set(2.25, -0.5, 2);

        //CABEZA
        function esfera() {
            const kbzGeometry = new THREE.SphereGeometry(0.8, 32, 16);
            var materialEsfera = new THREE.MeshLambertMaterial({ color: 0x045801 });
            const esfera = new THREE.Mesh(kbzGeometry, materialEsfera);
            return esfera;
        }
        const cabeza = new esfera(); cabeza.position.set(4, -0.75, 0);

        //OJOS
        const ojo1 = new esfera(); ojo1.scale.set(0.15, 0.15, 0.15); ojo1.position.set(4.75, -0.5, -0.2); 
        const ojo2 = new esfera(); ojo2.scale.set(0.15, 0.15, 0.15); ojo2.position.set(4.75, -0.5, 0.2); 

        //TORTUGA
        const tortuga = new THREE.Group();
        tortuga.add(cabeza, caparazon, pata1, pata2, pata3, pata4, ojo1, ojo2); //añadir elementosal grupo tortuga
        scene.add(tortuga); //añadr grupo tortuga
        function makeLights() { //LUCES DE LA ESCENA

            light0 = new THREE.AmbientLight(0x202020); // 10%
            scene.add(light0);

            light1 = new THREE.PointLight(0xEBF3EB,1); // 50%
            light1.position.set(9, 8, 5);
            scene.add(light1);

            light2 = new THREE.DirectionalLight(0xEBF3EB,0.8);
            light2.position.set(0, 0, 0);
            scene.add(light2);
        }

        renderer.render(scene, camera); //carga (renderiza) la escena y la camara
        function animate() {
            requestAnimationFrame(animate);

            controls.update();
            //tortuga.rotation.x += 0.01;
            //tortuga.rotation.y += 0.01;
            renderer.render(scene, camera);
        };
        animate();
        makeLights();

    </script>


</body>

</html>